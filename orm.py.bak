
#!/usr/bin/env python3

import psycopg2
print ("in object_relational_mapper.py")

class Database:
    def __init__(self):
        self.connection = psycopg2.connect(dbname = 'terminal_trader')
        self.cursor     = self.connection.cursor()

    def __enter__(self):
        return self

    def __exit__(self, type_, value, traceback):
        if self.connection:
            if self.cursor:
                self.connection.commit()
                self.cursor.close()
            self.connection.close()


    def create_table(self, table_name):
        self.cursor.execute(f"DROP TABLE IF EXISTS {table_name};")
        self.cursor.execute(
            """CREATE TABLE {table_name}(
                pk SERIAL PRIMARY KEY
            );""".format(table_name = table_name))

    def add_column(self, table_name, column_name, column_type):
        self.cursor.execute(
            """ALTER TABLE {table_name}
                ADD COLUMN {column_name} {column_type}
                ;""".format(table_name = table_name, column_name = column_name, column_type = column_type))


if __name__ == "__main__":

    with Database() as db:
        dict = {"table_name" : "users",
                "column_names" : [
                    {"column_name":"username", "column_type":"VARCHAR"},
                    {"column_name":"password", "column_type":"VARCHAR"},
                    {"column_name":"member_since","column_type":"FLOAT"}]}

        db.create_table(dict["table_name"])
        for column_name in dict["column_names"]:
            db.add_column(
                dict["table_name"],
                column_name["column_name"],
                column_name["column_type"])

